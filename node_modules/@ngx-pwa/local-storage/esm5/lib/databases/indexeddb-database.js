/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';
import { map, mergeMap, first, tap, filter } from 'rxjs/operators';
import { LocalStorageDatabase } from './localstorage-database';
import { LOCAL_STORAGE_PREFIX } from '../tokens';
import * as i0 from "@angular/core";
import * as i1 from "../tokens";
var IndexedDBDatabase = /** @class */ (function () {
    /**
     * Connects to IndexedDB
     */
    function IndexedDBDatabase(prefix) {
        if (prefix === void 0) { prefix = null; }
        this.prefix = prefix;
        /**
         * IndexedDB database name for local storage
         */
        this.dbName = 'ngStorage';
        /**
         * IndexedDB object store name for local storage
         */
        this.objectStoreName = 'localStorage';
        /**
         * IndexedDB key path name for local storage (where an item's key will be stored)
         */
        this.keyPath = 'key';
        /**
         * IndexedDB data path name for local storage (where items' value will be stored)
         */
        this.dataPath = 'value';
        /**
         * IndexedDB is available but failing in some scenarios (Firefox private mode, Safari cross-origin iframes),
         * so a fallback can be needed.
         */
        this.fallback = null;
        if (prefix) {
            this.dbName = prefix + "_" + this.dbName;
        }
        /* Creating the RxJS ReplaySubject */
        this.database = new ReplaySubject();
        /* Connecting to IndexedDB */
        this.connect(prefix);
    }
    Object.defineProperty(IndexedDBDatabase.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /* Fallback storage if set */
            if (this.fallback) {
                return this.fallback.size;
            }
            return this.transaction('readonly').pipe(mergeMap(function (transaction) {
                /* Deleting the item in local storage */
                /** @type {?} */
                var request = transaction.count();
                /** @type {?} */
                var success = ((/** @type {?} */ (fromEvent(request, 'success')))).pipe(map(function (event) { return (/** @type {?} */ (((/** @type {?} */ (event.target))).result)); }));
                /* Merging success and errors events and autoclosing the observable */
                return ((/** @type {?} */ (race(success, _this.toErrorObservable(request, "length")))));
            }), first());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets an item value in local storage
     * @param key The item's key
     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    IndexedDBDatabase.prototype.getItem = /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    function (key) {
        var _this = this;
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.getItem(key);
        }
        /* Opening a trasaction and requesting the item in local storage */
        return this.transaction().pipe(map(function (transaction) { return transaction.get(key); }), mergeMap(function (request) {
            /* Listening to the success event, and passing the item value if found, null otherwise */
            /** @type {?} */
            var success = ((/** @type {?} */ (fromEvent(request, 'success')))).pipe(map(function (event) { return ((/** @type {?} */ (event.target))).result; }), map(function (result) {
                if ((result != null) && (typeof result === 'object') && (_this.dataPath in result) && (result[_this.dataPath] != null)) {
                    return ((/** @type {?} */ (result[_this.dataPath])));
                }
                else if (result != null) {
                    return (/** @type {?} */ (result));
                }
                return null;
            }));
            /* Merging success and errors events and autoclosing the observable */
            return (race(success, _this.toErrorObservable(request, "getter")));
        }), first());
    };
    /**
     * Sets an item in local storage
     * @param key The item's key
     * @param data The item's value, must NOT be null or undefined
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    IndexedDBDatabase.prototype.setItem = /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function (key, data) {
        var _this = this;
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.setItem(key, data);
        }
        /* Storing null is not correctly supported by IndexedDB and unnecessary here */
        if (data == null) {
            return of(true);
        }
        /* Transaction must be the same for read and write, to avoid concurrency issues */
        /** @type {?} */
        var transaction$ = this.transaction('readwrite');
        /** @type {?} */
        var transaction;
        /* Opening a transaction */
        return transaction$.pipe(tap(function (value) {
            transaction = value;
        }), 
        /* Check if the key already exists or not
         * `getKey()` is only available in indexedDb v2 (Chrome >= 58)
         * In older browsers, the value is checked instead, but it could lead to an exception
         * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDb` API)
         */
        map(function () { return ('getKey' in transaction) ? transaction.getKey(key) : ((/** @type {?} */ (transaction))).get(key); }), mergeMap(function (request) {
            /* Listening to the success event, and passing the item value if found, null otherwise */
            /** @type {?} */
            var success = ((/** @type {?} */ (fromEvent(request, 'success')))).pipe(map(function (event) { return (/** @type {?} */ (((/** @type {?} */ (event.target))).result)); }));
            /* Merging success and errors events and autoclosing the observable */
            return (race(success, _this.toErrorObservable(request, "setter")));
        }), mergeMap(function (existingEntry) {
            var _a, _b;
            /* Adding or updating local storage, based on previous checking */
            /** @type {?} */
            var request = (existingEntry === undefined) ?
                transaction.add((_a = {}, _a[_this.dataPath] = data, _a), key) :
                transaction.put((_b = {}, _b[_this.dataPath] = data, _b), key);
            /* Merging success (passing true) and error events and autoclosing the observable */
            return (race(_this.toSuccessObservable(request), _this.toErrorObservable(request, "setter")));
        }), first());
    };
    /**
     * Deletes an item in local storage
     * @param key The item's key
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    IndexedDBDatabase.prototype.removeItem = /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function (key) {
        var _this = this;
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.removeItem(key);
        }
        /* Opening a transaction and checking if the item exists in local storage */
        return this.getItem(key).pipe(mergeMap(function (data) {
            /* If the item exists in local storage */
            if (data != null) {
                /* Opening a transaction */
                return _this.transaction('readwrite').pipe(mergeMap(function (transaction) {
                    /* Deleting the item in local storage */
                    /** @type {?} */
                    var request = transaction.delete(key);
                    /* Merging success (passing true) and error events and autoclosing the observable */
                    return (race(_this.toSuccessObservable(request), _this.toErrorObservable(request, "remover")));
                }));
            }
            /* Passing true if the item does not exist in local storage */
            return of(true);
        }), first());
    };
    /**
     * Deletes all items from local storage
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    IndexedDBDatabase.prototype.clear = /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function () {
        var _this = this;
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.clear();
        }
        /* Opening a transaction */
        return this.transaction('readwrite').pipe(mergeMap(function (transaction) {
            /* Deleting all items from local storage */
            /** @type {?} */
            var request = transaction.clear();
            /* Merging success (passing true) and error events and autoclosing the observable */
            return (race(_this.toSuccessObservable(request), _this.toErrorObservable(request, "clearer")));
        }), first());
    };
    /**
     * @return {?}
     */
    IndexedDBDatabase.prototype.keys = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.keys();
        }
        return this.transaction('readonly').pipe(mergeMap(function (transaction) {
            if ('getAllKeys' in transaction) {
                /* Deleting the item in local storage */
                /** @type {?} */
                var request = transaction.getAllKeys();
                /** @type {?} */
                var success = ((/** @type {?} */ (fromEvent(request, 'success')))).pipe(map(function (event) { return (/** @type {?} */ (((/** @type {?} */ (event.target))).result)); }));
                /* Merging success and errors events and autoclosing the observable */
                return (race(success, _this.toErrorObservable(request, "keys")));
            }
            else {
                /* `getAllKeys()` is from IndexedDB v2.0 standard, which is not supported in IE/Edge */
                /** @type {?} */
                var request = ((/** @type {?} */ (transaction))).openCursor();
                /** @type {?} */
                var keys_1 = [];
                /** @type {?} */
                var success = fromEvent(request, 'success').pipe(map(function (event) { return (/** @type {?} */ (((/** @type {?} */ (event.target))).result)); }), tap(function (cursor) {
                    if (cursor) {
                        keys_1.push((/** @type {?} */ (cursor.key)));
                        cursor.continue();
                    }
                }), filter(function (cursor) { return !cursor; }), map(function () { return keys_1; }));
                /* Merging success and errors events and autoclosing the observable */
                return (race(success, _this.toErrorObservable(request, "keys")));
            }
        }), first());
    };
    /**
     * @param {?} key
     * @return {?}
     */
    IndexedDBDatabase.prototype.has = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.has(key);
        }
        return this.transaction('readonly').pipe(
        /* `getKey()` is from IndexedDB v2.0 standard, which is not supported in IE/Edge */
        map(function (transaction) { return ('getKey' in transaction) ? transaction.getKey(key) : ((/** @type {?} */ (transaction))).get(key); }), mergeMap(function (request) {
            /* Listening to the success event, and passing the item value if found, null otherwise */
            /** @type {?} */
            var success = ((/** @type {?} */ (fromEvent(request, 'success')))).pipe(map(function (event) { return ((/** @type {?} */ (event.target))).result; }), map(function (result) { return (result !== undefined) ? true : false; }));
            /* Merging success and errors events and autoclosing the observable */
            return (race(success, _this.toErrorObservable(request, "has")));
        }), first());
    };
    /**
     * Connects to IndexedDB and creates the object store on first time
     */
    /**
     * Connects to IndexedDB and creates the object store on first time
     * @protected
     * @param {?=} prefix
     * @return {?}
     */
    IndexedDBDatabase.prototype.connect = /**
     * Connects to IndexedDB and creates the object store on first time
     * @protected
     * @param {?=} prefix
     * @return {?}
     */
    function (prefix) {
        var _this = this;
        if (prefix === void 0) { prefix = null; }
        /** @type {?} */
        var request;
        /* Connecting to IndexedDB */
        try {
            request = indexedDB.open(this.dbName);
        }
        catch (error) {
            /* Fallback storage if IndexedDb connection is failing */
            this.setFallback(prefix);
            return;
        }
        /* Listening the event fired on first connection, creating the object store for local storage */
        ((/** @type {?} */ (fromEvent(request, 'upgradeneeded'))))
            .pipe(first())
            .subscribe(function (event) {
            /* Getting the database connection */
            /** @type {?} */
            var database = (/** @type {?} */ (((/** @type {?} */ (event.target))).result));
            /* Checking if the object store already exists, to avoid error */
            if (!database.objectStoreNames.contains(_this.objectStoreName)) {
                /* Creating the object store for local storage */
                database.createObjectStore(_this.objectStoreName);
            }
        });
        /* Listening the success event and converting to an RxJS Observable */
        /** @type {?} */
        var success = (/** @type {?} */ (fromEvent(request, 'success')));
        /* Merging success and errors events */
        ((/** @type {?} */ (race(success, this.toErrorObservable(request, "connection")))))
            .pipe(first())
            .subscribe(function (event) {
            /* Storing the database connection for further access */
            _this.database.next((/** @type {?} */ (((/** @type {?} */ (event.target))).result)));
        }, function () {
            /* Fallback storage if IndexedDb connection is failing */
            _this.setFallback(prefix);
        });
    };
    /**
     * Opens an IndexedDB transaction and gets the local storage object store
     * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations
     * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable
     */
    /**
     * Opens an IndexedDB transaction and gets the local storage object store
     * @protected
     * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations
     * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable
     */
    IndexedDBDatabase.prototype.transaction = /**
     * Opens an IndexedDB transaction and gets the local storage object store
     * @protected
     * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations
     * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable
     */
    function (mode) {
        var _this = this;
        if (mode === void 0) { mode = 'readonly'; }
        /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */
        return this.database
            .pipe(map(function (database) { return database.transaction([_this.objectStoreName], mode).objectStore(_this.objectStoreName); }));
    };
    /**
     * Transforms a IndexedDB success event in an RxJS Observable
     * @param request The request to listen
     * @returns A RxJS Observable with true value
     */
    /**
     * Transforms a IndexedDB success event in an RxJS Observable
     * @protected
     * @param {?} request The request to listen
     * @return {?} A RxJS Observable with true value
     */
    IndexedDBDatabase.prototype.toSuccessObservable = /**
     * Transforms a IndexedDB success event in an RxJS Observable
     * @protected
     * @param {?} request The request to listen
     * @return {?} A RxJS Observable with true value
     */
    function (request) {
        /* Transforming a IndexedDB success event in an RxJS Observable with true value */
        return ((/** @type {?} */ (fromEvent(request, 'success'))))
            .pipe(map(function () { return true; }));
    };
    /**
     * Transforms a IndexedDB error event in an RxJS ErrorObservable
     * @param request The request to listen
     * @param error Optionnal details about the error's origin
     * @returns A RxJS ErrorObservable
     */
    /**
     * Transforms a IndexedDB error event in an RxJS ErrorObservable
     * @protected
     * @param {?} request The request to listen
     * @param {?=} error Optionnal details about the error's origin
     * @return {?} A RxJS ErrorObservable
     */
    IndexedDBDatabase.prototype.toErrorObservable = /**
     * Transforms a IndexedDB error event in an RxJS ErrorObservable
     * @protected
     * @param {?} request The request to listen
     * @param {?=} error Optionnal details about the error's origin
     * @return {?} A RxJS ErrorObservable
     */
    function (request, error) {
        if (error === void 0) { error = ""; }
        /* Transforming a IndexedDB error event in an RxJS ErrorObservable */
        return ((/** @type {?} */ (fromEvent(request, 'error'))))
            .pipe(mergeMap(function () { return throwError(new Error("IndexedDB " + error + " issue : " + ((/** @type {?} */ (request.error))).message + ".")); }));
    };
    /**
     * @protected
     * @param {?} prefix
     * @return {?}
     */
    IndexedDBDatabase.prototype.setFallback = /**
     * @protected
     * @param {?} prefix
     * @return {?}
     */
    function (prefix) {
        this.fallback = new LocalStorageDatabase(prefix);
    };
    IndexedDBDatabase.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IndexedDBDatabase.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
    ]; };
    /** @nocollapse */ IndexedDBDatabase.ngInjectableDef = i0.defineInjectable({ factory: function IndexedDBDatabase_Factory() { return new IndexedDBDatabase(i0.inject(i1.LOCAL_STORAGE_PREFIX, 8)); }, token: IndexedDBDatabase, providedIn: "root" });
    return IndexedDBDatabase;
}());
export { IndexedDBDatabase };
if (false) {
    /**
     * IndexedDB database name for local storage
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.dbName;
    /**
     * IndexedDB object store name for local storage
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.objectStoreName;
    /**
     * IndexedDB key path name for local storage (where an item's key will be stored)
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.keyPath;
    /**
     * IndexedDB data path name for local storage (where items' value will be stored)
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.dataPath;
    /**
     * IndexedDB database connection, wrapped in a RxJS ReplaySubject to be able to access the connection
     * even after the connection success event happened
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.database;
    /**
     * IndexedDB is available but failing in some scenarios (Firefox private mode, Safari cross-origin iframes),
     * so a fallback can be needed.
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.fallback;
    /**
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.prefix;
}
//# sourceMappingURL=data:application/json;base64,