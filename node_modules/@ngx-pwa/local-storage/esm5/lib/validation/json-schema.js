/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Avoid: will be removed in v8 in favor of another interface.
 * @record
 */
export function JSONSchemaConst() { }
if (false) {
    /**
     * Checks if a value is strictly equal to this.
     * Can't be an object or array, as two objects or arrays are never equal.
     * @type {?}
     */
    JSONSchemaConst.prototype.const;
}
/**
 * Avoid: will be removed in v8 in favor of another interface.
 * @record
 */
export function JSONSchemaEnum() { }
if (false) {
    /**
     * Checks if a value is strictly equal to one of the value of enum.
     * Can't be an object or array, as two objects or arrays are never equal.
     * @type {?}
     */
    JSONSchemaEnum.prototype.enum;
}
/**
 * @record
 */
export function JSONSchemaBoolean() { }
if (false) {
    /**
     * Type for a boolean value.
     * @type {?}
     */
    JSONSchemaBoolean.prototype.type;
}
/**
 * Avoid: will be removed in v8.
 * @record
 */
export function JSONSchemaNull() { }
if (false) {
    /**
     * Type for a null value.
     * @type {?}
     */
    JSONSchemaNull.prototype.type;
}
/**
 * @record
 */
export function JSONSchemaString() { }
if (false) {
    /**
     * Type for a string value.
     * @type {?}
     */
    JSONSchemaString.prototype.type;
    /**
     * Maxium length for a string.
     * Must be a non-negative integer.
     * @type {?|undefined}
     */
    JSONSchemaString.prototype.maxLength;
    /**
     * Minimum length for a string.
     * Must be a non-negative integer.
     * @type {?|undefined}
     */
    JSONSchemaString.prototype.minLength;
    /**
     * Pattern to match for a string.
     * Must be a valid regular expression, WITHOUT the / delimiters.
     * @type {?|undefined}
     */
    JSONSchemaString.prototype.pattern;
}
/**
 * @record
 */
export function JSONSchemaNumeric() { }
if (false) {
    /** @type {?} */
    JSONSchemaNumeric.prototype.type;
    /**
     * Check if a number is a multiple of x.
     * Must be strictly greater than 0.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.multipleOf;
    /**
     * Check if a number is less or equal than this maximum.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.maximum;
    /**
     * Check if a number is strictly less than this maximum.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.exclusiveMaximum;
    /**
     * Check if a number is greater or equal than this minimum.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.minimum;
    /**
     * Check if a number is strictly greater than this minimum.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.exclusiveMinimum;
}
/**
 * @record
 */
export function JSONSchemaArray() { }
if (false) {
    /**
     * Type for an array value.
     * Will be *required* in v8, so explicit this now!
     * @type {?|undefined}
     */
    JSONSchemaArray.prototype.type;
    /**
     * Schema for the values of an array.
     * Avoid to use an array of schemas, this feature will be removed in v8.
     * @type {?}
     */
    JSONSchemaArray.prototype.items;
    /**
     * Check if an array length is less or equal to this value.
     * Must be a non negative integer.
     * @type {?|undefined}
     */
    JSONSchemaArray.prototype.maxItems;
    /**
     * Check if an array length is greater or equal to this value.
     * Must be a non negative integer.
     * @type {?|undefined}
     */
    JSONSchemaArray.prototype.minItems;
    /**
     * Check if an array only have unique values.
     * @type {?|undefined}
     */
    JSONSchemaArray.prototype.uniqueItems;
}
/**
 * @record
 */
export function JSONSchemaObject() { }
if (false) {
    /**
     * Type for an object value.
     * Will be *required* in v8, so explicit this now!
     * @type {?|undefined}
     */
    JSONSchemaObject.prototype.type;
    /**
     * List of properties schemas for an object.
     * @type {?}
     */
    JSONSchemaObject.prototype.properties;
    /**
     * Array of names of the required properties for an object.
     * Properties set as required should be present in 'properties' too.
     * Note that in the last spec, booleans are not supported anymore.
     * @type {?|undefined}
     */
    JSONSchemaObject.prototype.required;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1zY2hlbWEuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRpb24vanNvbi1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxxQ0FRQzs7Ozs7OztJQUZDLGdDQUF3Qzs7Ozs7O0FBTzFDLG9DQVFDOzs7Ozs7O0lBRkMsOEJBQTJDOzs7OztBQUk3Qyx1Q0FPQzs7Ozs7O0lBRkMsaUNBQWdCOzs7Ozs7QUFPbEIsb0NBT0M7Ozs7OztJQUZDLDhCQUFhOzs7OztBQUlmLHNDQXlCQzs7Ozs7O0lBcEJDLGdDQUFlOzs7Ozs7SUFNZixxQ0FBbUI7Ozs7OztJQU1uQixxQ0FBbUI7Ozs7OztJQU1uQixtQ0FBaUI7Ozs7O0FBSW5CLHVDQThCQzs7O0lBNUJDLGlDQUEyQjs7Ozs7O0lBTTNCLHVDQUFvQjs7Ozs7SUFLcEIsb0NBQWlCOzs7OztJQUtqQiw2Q0FBMEI7Ozs7O0lBSzFCLG9DQUFpQjs7Ozs7SUFLakIsNkNBQTBCOzs7OztBQUk1QixxQ0ErQkM7Ozs7Ozs7SUF6QkMsK0JBQWU7Ozs7OztJQU1mLGdDQUFpQzs7Ozs7O0lBTWpDLG1DQUFrQjs7Ozs7O0lBTWxCLG1DQUFrQjs7Ozs7SUFLbEIsc0NBQXNCOzs7OztBQUl4QixzQ0FzQkM7Ozs7Ozs7SUFoQkMsZ0NBQWdCOzs7OztJQUtoQixzQ0FFRTs7Ozs7OztJQU9GLG9DQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQXZvaWQ6IHdpbGwgYmUgcmVtb3ZlZCBpbiB2OCBpbiBmYXZvciBvZiBhbm90aGVyIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKU09OU2NoZW1hQ29uc3Qge1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSB2YWx1ZSBpcyBzdHJpY3RseSBlcXVhbCB0byB0aGlzLlxuICAgKiBDYW4ndCBiZSBhbiBvYmplY3Qgb3IgYXJyYXksIGFzIHR3byBvYmplY3RzIG9yIGFycmF5cyBhcmUgbmV2ZXIgZXF1YWwuXG4gICAqL1xuICBjb25zdDogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IG51bGw7XG5cbn1cblxuLyoqXG4gKiBBdm9pZDogd2lsbCBiZSByZW1vdmVkIGluIHY4IGluIGZhdm9yIG9mIGFub3RoZXIgaW50ZXJmYWNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEpTT05TY2hlbWFFbnVtIHtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgdmFsdWUgaXMgc3RyaWN0bHkgZXF1YWwgdG8gb25lIG9mIHRoZSB2YWx1ZSBvZiBlbnVtLlxuICAgKiBDYW4ndCBiZSBhbiBvYmplY3Qgb3IgYXJyYXksIGFzIHR3byBvYmplY3RzIG9yIGFycmF5cyBhcmUgbmV2ZXIgZXF1YWwuXG4gICAqL1xuICBlbnVtOiAoc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IG51bGwpW107XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBKU09OU2NoZW1hQm9vbGVhbiB7XG5cbiAgLyoqXG4gICAqIFR5cGUgZm9yIGEgYm9vbGVhbiB2YWx1ZS5cbiAgICovXG4gIHR5cGU6ICdib29sZWFuJztcblxufVxuXG4vKipcbiAqIEF2b2lkOiB3aWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSlNPTlNjaGVtYU51bGwge1xuXG4gIC8qKlxuICAgKiBUeXBlIGZvciBhIG51bGwgdmFsdWUuXG4gICAqL1xuICB0eXBlOiAnbnVsbCc7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBKU09OU2NoZW1hU3RyaW5nIHtcblxuICAvKipcbiAgICogVHlwZSBmb3IgYSBzdHJpbmcgdmFsdWUuXG4gICAqL1xuICB0eXBlOiAnc3RyaW5nJztcblxuICAvKipcbiAgICogTWF4aXVtIGxlbmd0aCBmb3IgYSBzdHJpbmcuXG4gICAqIE11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlci5cbiAgICovXG4gIG1heExlbmd0aD86IG51bWJlcjtcblxuICAvKipcbiAgICogTWluaW11bSBsZW5ndGggZm9yIGEgc3RyaW5nLlxuICAgKiBNdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIuXG4gICAqL1xuICBtaW5MZW5ndGg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFBhdHRlcm4gdG8gbWF0Y2ggZm9yIGEgc3RyaW5nLlxuICAgKiBNdXN0IGJlIGEgdmFsaWQgcmVndWxhciBleHByZXNzaW9uLCBXSVRIT1VUIHRoZSAvIGRlbGltaXRlcnMuXG4gICAqL1xuICBwYXR0ZXJuPzogc3RyaW5nO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSlNPTlNjaGVtYU51bWVyaWMge1xuXG4gIHR5cGU6ICdudW1iZXInIHzCoCdpbnRlZ2VyJztcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBudW1iZXIgaXMgYSBtdWx0aXBsZSBvZiB4LlxuICAgKiBNdXN0IGJlIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiAwLlxuICAgKi9cbiAgbXVsdGlwbGVPZj86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBudW1iZXIgaXMgbGVzcyBvciBlcXVhbCB0aGFuIHRoaXMgbWF4aW11bS5cbiAgICovXG4gIG1heGltdW0/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgbnVtYmVyIGlzIHN0cmljdGx5IGxlc3MgdGhhbiB0aGlzIG1heGltdW0uXG4gICAqL1xuICBleGNsdXNpdmVNYXhpbXVtPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIG51bWJlciBpcyBncmVhdGVyIG9yIGVxdWFsIHRoYW4gdGhpcyBtaW5pbXVtLlxuICAgKi9cbiAgbWluaW11bT86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBudW1iZXIgaXMgc3RyaWN0bHkgZ3JlYXRlciB0aGFuIHRoaXMgbWluaW11bS5cbiAgICovXG4gIGV4Y2x1c2l2ZU1pbmltdW0/OiBudW1iZXI7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBKU09OU2NoZW1hQXJyYXkge1xuXG4gIC8qKlxuICAgKiBUeXBlIGZvciBhbiBhcnJheSB2YWx1ZS5cbiAgICogV2lsbCBiZSAqcmVxdWlyZWQqIGluIHY4LCBzbyBleHBsaWNpdCB0aGlzIG5vdyFcbiAgICovXG4gIHR5cGU/OiAnYXJyYXknO1xuXG4gIC8qKlxuICAgKiBTY2hlbWEgZm9yIHRoZSB2YWx1ZXMgb2YgYW4gYXJyYXkuXG4gICAqIEF2b2lkIHRvIHVzZSBhbiBhcnJheSBvZiBzY2hlbWFzLCB0aGlzIGZlYXR1cmUgd2lsbCBiZSByZW1vdmVkIGluIHY4LlxuICAgKi9cbiAgaXRlbXM6IEpTT05TY2hlbWEgfCBKU09OU2NoZW1hW107XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGFycmF5IGxlbmd0aCBpcyBsZXNzIG9yIGVxdWFsIHRvIHRoaXMgdmFsdWUuXG4gICAqIE11c3QgYmUgYSBub24gbmVnYXRpdmUgaW50ZWdlci5cbiAgICovXG4gIG1heEl0ZW1zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhcnJheSBsZW5ndGggaXMgZ3JlYXRlciBvciBlcXVhbCB0byB0aGlzIHZhbHVlLlxuICAgKiBNdXN0IGJlIGEgbm9uIG5lZ2F0aXZlIGludGVnZXIuXG4gICAqL1xuICBtaW5JdGVtcz86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXJyYXkgb25seSBoYXZlIHVuaXF1ZSB2YWx1ZXMuXG4gICAqL1xuICB1bmlxdWVJdGVtcz86IGJvb2xlYW47XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBKU09OU2NoZW1hT2JqZWN0IHtcblxuICAvKipcbiAgICogVHlwZSBmb3IgYW4gb2JqZWN0IHZhbHVlLlxuICAgKiBXaWxsIGJlICpyZXF1aXJlZCogaW4gdjgsIHNvIGV4cGxpY2l0IHRoaXMgbm93IVxuICAgKi9cbiAgdHlwZT86ICdvYmplY3QnO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgc2NoZW1hcyBmb3IgYW4gb2JqZWN0LlxuICAgKi9cbiAgcHJvcGVydGllczoge1xuICAgIFtrOiBzdHJpbmddOiBKU09OU2NoZW1hO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBuYW1lcyBvZiB0aGUgcmVxdWlyZWQgcHJvcGVydGllcyBmb3IgYW4gb2JqZWN0LlxuICAgKiBQcm9wZXJ0aWVzIHNldCBhcyByZXF1aXJlZCBzaG91bGQgYmUgcHJlc2VudCBpbiAncHJvcGVydGllcycgdG9vLlxuICAgKiBOb3RlIHRoYXQgaW4gdGhlIGxhc3Qgc3BlYywgYm9vbGVhbnMgYXJlIG5vdCBzdXBwb3J0ZWQgYW55bW9yZS5cbiAgICovXG4gIHJlcXVpcmVkPzogc3RyaW5nW107XG5cbn1cblxuLyoqXG4gKiBTdWJzZXQgb2YgdGhlIEpTT04gU2NoZW1hLlxuICogVHlwZXMgYXJlIGVuZm9yY2VkIHRvIHZhbGlkYXRlIGV2ZXJ5dGhpbmc6IGVhY2ggdmFsdWUgTVVTVCBoYXZlIGEgT05FIG9mIGVpdGhlciBgdHlwZWAuXG4gKiBOb3QgYWxsIHZhbGlkYXRpb24gZmVhdHVyZXMgYXJlIHN1cHBvcnRlZDoganVzdCBmb2xsb3cgdGhlIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IHR5cGUgSlNPTlNjaGVtYSA9IChKU09OU2NoZW1hQ29uc3TCoHwgSlNPTlNjaGVtYUVudW0gfFxuICBKU09OU2NoZW1hQm9vbGVhbiB8IEpTT05TY2hlbWFOdWxsIHwgSlNPTlNjaGVtYVN0cmluZyB8IEpTT05TY2hlbWFOdW1lcmljIHxcbiAgSlNPTlNjaGVtYUFycmF5IHwgSlNPTlNjaGVtYU9iamVjdClcbiAgJiB7IFtrOiBzdHJpbmddOiBhbnk7IH07XG4iXX0=