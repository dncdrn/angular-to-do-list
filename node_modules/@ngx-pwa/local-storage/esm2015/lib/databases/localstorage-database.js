/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { of, throwError } from 'rxjs';
import { LOCAL_STORAGE_PREFIX } from '../tokens';
import * as i0 from "@angular/core";
import * as i1 from "../tokens";
export class LocalStorageDatabase {
    /**
     * @param {?=} userPrefix
     */
    constructor(userPrefix = null) {
        this.userPrefix = userPrefix;
        /* Initializing native localStorage right now to be able to check its support on class instanciation */
        this.prefix = '';
        if (userPrefix) {
            this.prefix = `${userPrefix}_`;
        }
    }
    /**
     * @return {?}
     */
    get size() {
        return of(localStorage.length);
    }
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItem(key) {
        /** @type {?} */
        const unparsedData = localStorage.getItem(`${this.prefix}${key}`);
        /** @type {?} */
        let parsedData = null;
        if (unparsedData != null) {
            try {
                parsedData = JSON.parse(unparsedData);
            }
            catch (error) {
                return throwError(new Error(`Invalid data in localStorage.`));
            }
        }
        return of(parsedData);
    }
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    setItem(key, data) {
        /* Storing undefined in localStorage would then throw when getting and parsing the value */
        if (data !== undefined) {
            localStorage.setItem(`${this.prefix}${key}`, JSON.stringify(data));
        }
        return of(true);
    }
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    removeItem(key) {
        localStorage.removeItem(`${this.prefix}${key}`);
        return of(true);
    }
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    clear() {
        localStorage.clear();
        return of(true);
    }
    /**
     * @return {?}
     */
    keys() {
        /** @type {?} */
        const keys = [];
        for (let index = 0; index < localStorage.length; index += 1) {
            keys.push((/** @type {?} */ (this.getKey(index))));
        }
        return of(keys);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    has(key) {
        for (let index = 0; index < localStorage.length; index += 1) {
            if (key === this.getKey(index)) {
                return of(true);
            }
        }
        return of(false);
    }
    /**
     * @protected
     * @param {?} index
     * @return {?}
     */
    getKey(index) {
        /** @type {?} */
        const prefixedKey = localStorage.key(index);
        if (prefixedKey !== null) {
            return (this.prefix === '') ? prefixedKey : prefixedKey.substr(this.prefix.length);
        }
        return null;
    }
}
LocalStorageDatabase.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LocalStorageDatabase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
];
/** @nocollapse */ LocalStorageDatabase.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorageDatabase_Factory() { return new LocalStorageDatabase(i0.inject(i1.LOCAL_STORAGE_PREFIX, 8)); }, token: LocalStorageDatabase, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    LocalStorageDatabase.prototype.prefix;
    /**
     * @type {?}
     * @protected
     */
    LocalStorageDatabase.prototype.userPrefix;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxzdG9yYWdlLWRhdGFiYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9kYXRhYmFzZXMvbG9jYWxzdG9yYWdlLWRhdGFiYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFjLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHbEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sV0FBVyxDQUFDOzs7QUFLakQsTUFBTSxPQUFPLG9CQUFvQjs7OztJQVMvQixZQUFnRSxhQUE0QixJQUFJO1FBQWhDLGVBQVUsR0FBVixVQUFVLENBQXNCOztRQU50RixXQUFNLEdBQUcsRUFBRSxDQUFDO1FBUXBCLElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLFVBQVUsR0FBRyxDQUFDO1NBQ2hDO0lBRUgsQ0FBQzs7OztJQVZELElBQUksSUFBSTtRQUNOLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7Ozs7O0lBZUQsT0FBTyxDQUFVLEdBQVc7O2NBRXBCLFlBQVksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQzs7WUFDN0QsVUFBVSxHQUFhLElBQUk7UUFFL0IsSUFBSSxZQUFZLElBQUksSUFBSSxFQUFFO1lBRXhCLElBQUk7Z0JBQ0YsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDdkM7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxPQUFPLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUM7YUFDL0Q7U0FFRjtRQUVELE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXhCLENBQUM7Ozs7Ozs7SUFRRCxPQUFPLENBQUMsR0FBVyxFQUFFLElBQVM7UUFFNUIsMkZBQTJGO1FBQzNGLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUV0QixZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FFcEU7UUFFRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVsQixDQUFDOzs7Ozs7SUFPRCxVQUFVLENBQUMsR0FBVztRQUVwQixZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRWhELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWxCLENBQUM7Ozs7O0lBTUQsS0FBSztRQUVILFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVyQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVsQixDQUFDOzs7O0lBRUQsSUFBSTs7Y0FFSSxJQUFJLEdBQWEsRUFBRTtRQUV6QixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFO1lBRTNELElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBVSxDQUFDLENBQUM7U0FFekM7UUFFRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVsQixDQUFDOzs7OztJQUVELEdBQUcsQ0FBQyxHQUFXO1FBRWIsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRTtZQUUzRCxJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUU5QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUVqQjtTQUVGO1FBRUQsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbkIsQ0FBQzs7Ozs7O0lBRVMsTUFBTSxDQUFDLEtBQWE7O2NBRXRCLFdBQVcsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUUzQyxJQUFJLFdBQVcsS0FBSyxJQUFJLEVBQUU7WUFFeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBRXBGO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFFZCxDQUFDOzs7WUFsSUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OzRDQVVjLFFBQVEsWUFBSSxNQUFNLFNBQUMsb0JBQW9COzs7Ozs7OztJQU5wRCxzQ0FBc0I7Ozs7O0lBTVYsMENBQW9GIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTG9jYWxEYXRhYmFzZSB9IGZyb20gJy4vbG9jYWwtZGF0YWJhc2UnO1xuaW1wb3J0IHsgTE9DQUxfU1RPUkFHRV9QUkVGSVggfSBmcm9tICcuLi90b2tlbnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VEYXRhYmFzZSBpbXBsZW1lbnRzIExvY2FsRGF0YWJhc2Uge1xuXG4gIC8qIEluaXRpYWxpemluZyBuYXRpdmUgbG9jYWxTdG9yYWdlIHJpZ2h0IG5vdyB0byBiZSBhYmxlIHRvIGNoZWNrIGl0cyBzdXBwb3J0IG9uIGNsYXNzIGluc3RhbmNpYXRpb24gKi9cbiAgcHJvdGVjdGVkIHByZWZpeCA9ICcnO1xuXG4gIGdldCBzaXplKCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG9mKGxvY2FsU3RvcmFnZS5sZW5ndGgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChMT0NBTF9TVE9SQUdFX1BSRUZJWCkgcHJvdGVjdGVkIHVzZXJQcmVmaXg6IHN0cmluZyB8IG51bGwgPSBudWxsKSB7XG5cbiAgICBpZiAodXNlclByZWZpeCkge1xuICAgICAgdGhpcy5wcmVmaXggPSBgJHt1c2VyUHJlZml4fV9gO1xuICAgIH1cblxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gaXRlbSB2YWx1ZSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHJldHVybnMgVGhlIGl0ZW0ncyB2YWx1ZSBpZiB0aGUga2V5IGV4aXN0cywgbnVsbCBvdGhlcndpc2UsIHdyYXBwZWQgaW4gYW4gUnhKUyBPYnNlcnZhYmxlXG4gICAqL1xuICBnZXRJdGVtPFQgPSBhbnk+KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxUIHwgbnVsbD4ge1xuXG4gICAgY29uc3QgdW5wYXJzZWREYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYCR7dGhpcy5wcmVmaXh9JHtrZXl9YCk7XG4gICAgbGV0IHBhcnNlZERhdGE6IFQgfCBudWxsID0gbnVsbDtcblxuICAgIGlmICh1bnBhcnNlZERhdGEgIT0gbnVsbCkge1xuXG4gICAgICB0cnkge1xuICAgICAgICBwYXJzZWREYXRhID0gSlNPTi5wYXJzZSh1bnBhcnNlZERhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IobmV3IEVycm9yKGBJbnZhbGlkIGRhdGEgaW4gbG9jYWxTdG9yYWdlLmApKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBvZihwYXJzZWREYXRhKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHBhcmFtIGRhdGEgVGhlIGl0ZW0ncyB2YWx1ZSwgbXVzdCBOT1QgYmUgbnVsbCBvciB1bmRlZmluZWRcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICBzZXRJdGVtKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIC8qIFN0b3JpbmcgdW5kZWZpbmVkIGluIGxvY2FsU3RvcmFnZSB3b3VsZCB0aGVuIHRocm93IHdoZW4gZ2V0dGluZyBhbmQgcGFyc2luZyB0aGUgdmFsdWUgKi9cbiAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke3RoaXMucHJlZml4fSR7a2V5fWAsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblxuICAgIH1cblxuICAgIHJldHVybiBvZih0cnVlKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShgJHt0aGlzLnByZWZpeH0ke2tleX1gKTtcblxuICAgIHJldHVybiBvZih0cnVlKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIGl0ZW1zIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gIGNsZWFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG5cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG5cbiAgfVxuXG4gIGtleXMoKTogT2JzZXJ2YWJsZTxzdHJpbmdbXT4ge1xuXG4gICAgY29uc3Qga2V5czogc3RyaW5nW10gPSBbXTtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsb2NhbFN0b3JhZ2UubGVuZ3RoOyBpbmRleCArPSAxKSB7XG5cbiAgICAgIGtleXMucHVzaCh0aGlzLmdldEtleShpbmRleCkgYXMgc3RyaW5nKTtcblxuICAgIH1cblxuICAgIHJldHVybiBvZihrZXlzKTtcblxuICB9XG5cbiAgaGFzKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuXG4gICAgICBpZiAoa2V5ID09PSB0aGlzLmdldEtleShpbmRleCkpwqB7XG5cbiAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gb2YoZmFsc2UpO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0S2V5KGluZGV4OiBudW1iZXIpOiBzdHJpbmcgfCBudWxsIHtcblxuICAgIGNvbnN0IHByZWZpeGVkS2V5ID0gbG9jYWxTdG9yYWdlLmtleShpbmRleCk7XG5cbiAgICBpZiAocHJlZml4ZWRLZXkgIT09IG51bGwpIHtcblxuICAgICAgcmV0dXJuICh0aGlzLnByZWZpeCA9PT0gJycpID8gcHJlZml4ZWRLZXkgOiBwcmVmaXhlZEtleS5zdWJzdHIodGhpcy5wcmVmaXgubGVuZ3RoKTtcblxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuXG4gIH1cblxufVxuIl19